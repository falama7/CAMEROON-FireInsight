import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import folium
from folium.plugins import HeatMap, MarkerCluster, HeatMapWithTime
from streamlit_folium import folium_static
import os
import calendar
import io
import base64
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import imageio
from PIL import Image
import tempfile

# Configuration de la page
st.set_page_config(
    page_title="CM-FI",
    page_icon="üî•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fonctions utilitaires
@st.cache_data
def load_data(file_path):
    """Charger et pr√©traiter les donn√©es VIIRS"""
    try:
        df = pd.read_csv(file_path)
        
        # Convertir les dates et heures
        df['date_heure'] = pd.to_datetime(
            df['acq_date'] + ' ' + df['acq_time'].astype(str).str.zfill(4),
            format='%Y-%m-%d %H%M'
        )
        
        # Extraire des colonnes utiles pour l'analyse
        df['annee'] = df['date_heure'].dt.year
        df['mois'] = df['date_heure'].dt.month
        df['jour'] = df['date_heure'].dt.day
        df['heure'] = df['date_heure'].dt.hour
        df['nom_mois'] = df['date_heure'].dt.month.apply(lambda x: calendar.month_name[x])
        
        # Calculer une colonne de confiance num√©rique
        confidence_map = {'l': 1, 'n': 2, 'h': 3}
        df['confidence_num'] = df['confidence'].map(confidence_map)
        
        return df
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es: {e}")
        return None

def filter_data(df, confidence_min=None, date_range=None, day_night=None):
    """Filtrer les donn√©es selon plusieurs crit√®res"""
    filtered_df = df.copy()
    
    # Filtre par niveau de confiance
    if confidence_min:
        if confidence_min == 'l':
            pass  # Pas de filtre
        elif confidence_min == 'n':
            filtered_df = filtered_df[filtered_df['confidence'].isin(['n', 'h'])]
        elif confidence_min == 'h':
            filtered_df = filtered_df[filtered_df['confidence'] == 'h']
    
    # Filtre par plage de dates
    if date_range:
        start_date, end_date = date_range
        filtered_df = filtered_df[
            (filtered_df['date_heure'] >= pd.to_datetime(start_date)) & 
            (filtered_df['date_heure'] <= pd.to_datetime(end_date))
        ]
    
    # Filtre jour/nuit
    if day_night and day_night != 'both':
        filtered_df = filtered_df[filtered_df['daynight'] == day_night]
    
    return filtered_df

def create_heatmap(df, zoom_start=6):
    """Cr√©er une carte de chaleur des feux"""
    # Centrer la carte sur le Cameroun
    center_lat = df['latitude'].mean() if not df.empty else 7.3697
    center_lon = df['longitude'].mean() if not df.empty else 12.3547
    
    m = folium.Map(location=[center_lat, center_lon], zoom_start=zoom_start, 
                   tiles="CartoDB positron")
    
    # Ajouter des tuiles suppl√©mentaires
    folium.TileLayer('CartoDB dark_matter', name='Dark Map', attr='CartoDB').add_to(m)
    folium.TileLayer('Stamen Terrain', name='Terrain', attr='Stamen Design | OpenStreetMap').add_to(m)
    
    # Pr√©parer les donn√©es pour la carte de chaleur
    if not df.empty:
        # Utiliser FRP comme intensit√© du feu (normalis√©)
        if 'frp' in df.columns:
            heat_data = [[row['latitude'], row['longitude'], min(1, row['frp']/100)] 
                         for _, row in df.iterrows() if pd.notna(row['frp'])]
        else:
            heat_data = [[row['latitude'], row['longitude']] 
                         for _, row in df.iterrows()]
        
        # Ajouter la carte de chaleur
        HeatMap(heat_data, radius=10, blur=15, max_zoom=13).add_to(m)
    
    # Ajouter le contr√¥le de couches
    folium.LayerControl().add_to(m)
    
    return m

def create_hotspot_map(df, grid_size=0.1):
    """Identifier et visualiser les zones √† forte pression de feu"""
    if df.empty:
        return None, pd.DataFrame()
    
    # Cr√©er une grille pour agr√©ger les feux
    df['lat_bin'] = np.floor(df['latitude'] / grid_size) * grid_size
    df['lon_bin'] = np.floor(df['longitude'] / grid_size) * grid_size
    
    # Compter le nombre de feux par cellule de la grille
    hotspots = df.groupby(['lat_bin', 'lon_bin']).size().reset_index(name='count')
    
    # Calculer la moyenne de FRP par cellule si disponible
    if 'frp' in df.columns:
        frp_by_cell = df.groupby(['lat_bin', 'lon_bin'])['frp'].mean().reset_index(name='frp_mean')
        hotspots = hotspots.merge(frp_by_cell, on=['lat_bin', 'lon_bin'])
    
    # Trier par nombre de feux d√©croissant
    hotspots = hotspots.sort_values('count', ascending=False)
    
    # Cr√©er la carte
    center_lat = df['latitude'].mean()
    center_lon = df['longitude'].mean()
    
    m = folium.Map(location=[center_lat, center_lon], zoom_start=7)
    
    # Ajouter des tuiles
    folium.TileLayer('CartoDB positron', name='Light Map', attr='CartoDB').add_to(m)
    folium.TileLayer('CartoDB dark_matter', name='Dark Map', attr='CartoDB').add_to(m)
    
    # Cr√©er un cluster de marqueurs
    marker_cluster = MarkerCluster().add_to(m)
    
    # Ajouter les hotspots √† la carte
    for idx, row in hotspots.head(100).iterrows():  # Limiter aux 100 premiers hotspots
        radius = np.sqrt(row['count']) * 500  # Taille proportionnelle √† la racine du nombre de feux
        
        # Couleur bas√©e sur le nombre de feux
        if row['count'] > hotspots['count'].quantile(0.9):
            color = 'red'
            fill_color = '#ff4444'
        elif row['count'] > hotspots['count'].quantile(0.7):
            color = 'orange'
            fill_color = '#ffaa44'
        else:
            color = 'blue'
            fill_color = '#4285F4'
        
        # Cr√©er le popup avec les informations
        if 'frp_mean' in row:
            popup_text = f"Nombre de feux: {row['count']}<br>FRP moyenne: {row['frp_mean']:.2f}"
        else:
            popup_text = f"Nombre de feux: {row['count']}"
        
        folium.Circle(
            location=[row['lat_bin'] + grid_size/2, row['lon_bin'] + grid_size/2],
            radius=radius,
            popup=popup_text,
            color=color,
            fill=True,
            fill_color=fill_color,
            fill_opacity=0.6
        ).add_to(m)
    
    # Ajouter le contr√¥le de couches
    folium.LayerControl().add_to(m)
    
    return m, hotspots

def create_time_series(df, frequency='M'):
    """Cr√©er une s√©rie temporelle des feux"""
    if df.empty:
        return None
    
    # Agr√©ger par p√©riode
    if frequency == 'D':
        df_time = df.groupby(pd.Grouper(key='date_heure', freq='D')).size().reset_index(name='count')
        title = "Nombre de feux par jour"
    elif frequency == 'W':
        df_time = df.groupby(pd.Grouper(key='date_heure', freq='W')).size().reset_index(name='count')
        title = "Nombre de feux par semaine"
    elif frequency == 'M':
        df_time = df.groupby(pd.Grouper(key='date_heure', freq='M')).size().reset_index(name='count')
        title = "Nombre de feux par mois"
    elif frequency == 'H':
        # Groupe par heure de la journ√©e
        df_time = df.groupby('heure').size().reset_index(name='count')
        
        # Cr√©er un graphique en barres pour les heures
        fig = px.bar(df_time, x='heure', y='count', 
                     title="Distribution des feux par heure de la journ√©e",
                     labels={'heure': 'Heure de la journ√©e', 'count': 'Nombre de feux'})
        return fig
    
    # Cr√©er un graphique lin√©aire pour les s√©ries temporelles
    fig = px.line(df_time, x='date_heure', y='count', 
                  title=title,
                  labels={'date_heure': 'Date', 'count': 'Nombre de feux'})
    
    # Ajouter des rep√®res pour les d√©buts de feux fr√©quents
    if frequency != 'H':
        # Identifier les pics (d√©buts potentiels de feux importants)
        threshold = df_time['count'].mean() + df_time['count'].std()
        peaks = df_time[df_time['count'] > threshold]
        
        for idx, row in peaks.iterrows():
            fig.add_annotation(
                x=row['date_heure'],
                y=row['count'],
                text="Pic",
                showarrow=True,
                arrowhead=1,
                ax=0,
                ay=-40
            )
    
    return fig

def compare_years(df, year1, year2):
    """Comparer les feux entre deux ann√©es diff√©rentes"""
    if df.empty or year1 not in df['annee'].unique() or year2 not in df['annee'].unique():
        return None, None, None
    
    # Filtrer les donn√©es pour chaque ann√©e
    df_year1 = df[df['annee'] == year1]
    df_year2 = df[df['annee'] == year2]
    
    # 1. Comparaison du nombre total de feux
    total_fires = pd.DataFrame({
        'Ann√©e': [year1, year2],
        'Nombre de feux': [len(df_year1), len(df_year2)]
    })
    
    fig_total = px.bar(total_fires, x='Ann√©e', y='Nombre de feux',
                       title=f"Comparaison du nombre total de feux: {year1} vs {year2}",
                       color='Ann√©e')
    
    # 2. Comparaison mensuelle
    monthly_year1 = df_year1.groupby('nom_mois').size().reset_index(name='count')
    monthly_year1['Ann√©e'] = str(year1)
    
    monthly_year2 = df_year2.groupby('nom_mois').size().reset_index(name='count')
    monthly_year2['Ann√©e'] = str(year2)
    
    monthly_combined = pd.concat([monthly_year1, monthly_year2])
    
    # Ordonner les mois correctement
    month_order = {month: i for i, month in enumerate(calendar.month_name[1:])}
    monthly_combined['month_num'] = monthly_combined['nom_mois'].map(month_order)
    monthly_combined = monthly_combined.sort_values('month_num')
    
    fig_monthly = px.line(monthly_combined, x='nom_mois', y='count', color='Ann√©e',
                          title=f"Comparaison mensuelle des feux: {year1} vs {year2}",
                          labels={'nom_mois': 'Mois', 'count': 'Nombre de feux'},
                          markers=True)
    
    # 3. Comparaison de l'intensit√© (FRP) si disponible
    if 'frp' in df.columns:
        frp_year1 = df_year1['frp'].mean()
        frp_year2 = df_year2['frp'].mean()
        
        frp_comparison = pd.DataFrame({
            'Ann√©e': [year1, year2],
            'FRP moyenne': [frp_year1, frp_year2]
        })
        
        fig_frp = px.bar(frp_comparison, x='Ann√©e', y='FRP moyenne',
                         title=f"Comparaison de l'intensit√© moyenne des feux (FRP): {year1} vs {year2}",
                         color='Ann√©e')
    else:
        fig_frp = None
    
    return fig_total, fig_monthly, fig_frp

def create_animated_forecast_map(df, forecast_data, period=6, grid_size=0.1, freq='M'):
    """Cr√©er une carte anim√©e des pr√©visions de feux
    
    Args:
        df: DataFrame avec les donn√©es historiques
        forecast_data: DataFrame avec les pr√©visions
        period: Nombre de p√©riodes de pr√©vision
        grid_size: Taille de la grille pour l'agr√©gation
        freq: Fr√©quence des pr√©visions ('D', 'W', 'M')
        
    Returns:
        m: Carte folium avec animation temporelle
    """
    if df.empty or forecast_data is None:
        return None
    
    # Convertir les pr√©visions globales en pr√©visions spatiales
    # Nous allons distribuer les pr√©visions selon la distribution spatiale historique
    
    # 1. Cr√©er une grille spatiale des feux historiques
    df['lat_bin'] = np.floor(df['latitude'] / grid_size) * grid_size
    df['lon_bin'] = np.floor(df['longitude'] / grid_size) * grid_size
    
    # Compter les feux par cellule et calculer la distribution en pourcentage
    grid_counts = df.groupby(['lat_bin', 'lon_bin']).size().reset_index(name='count')
    grid_counts['pct'] = grid_counts['count'] / grid_counts['count'].sum()
    
    # 2. Cr√©er des pr√©visions spatialis√©es pour chaque p√©riode
    last_date = df['date_heure'].max()
    
    # Pr√©parer les donn√©es pour l'animation
    all_frames = []
    
    # Ajouter les donn√©es historiques (nous utilisons les 3 derni√®res p√©riodes)
    if freq == 'D':
        hist_period = pd.Timedelta(days=3)
        freq_delta = pd.Timedelta(days=1)
    elif freq == 'W':
        hist_period = pd.Timedelta(weeks=3)
        freq_delta = pd.Timedelta(weeks=1)
    else:  # 'M'
        hist_period = pd.Timedelta(days=90)  # ~3 mois
        freq_delta = pd.Timedelta(days=30)  # ~1 mois
    
    # Filtrer les donn√©es historiques r√©centes
    recent_df = df[df['date_heure'] > (last_date - hist_period)]
    
    # Agr√©ger par p√©riode et par cellule
    if freq == 'D':
        recent_grouped = recent_df.groupby(['lat_bin', 'lon_bin', pd.Grouper(key='date_heure', freq='D')])
    elif freq == 'W':
        recent_grouped = recent_df.groupby(['lat_bin', 'lon_bin', pd.Grouper(key='date_heure', freq='W')])
    else:  # 'M'
        recent_grouped = recent_df.groupby(['lat_bin', 'lon_bin', pd.Grouper(key='date_heure', freq='M')])
    
    recent_counts = recent_grouped.size().reset_index(name='count')
    
    # Ajouter les donn√©es historiques √† all_frames
    for date, group in recent_counts.groupby('date_heure'):
        frame_data = []
        for _, row in group.iterrows():
            frame_data.append([row['lat_bin'] + grid_size/2, row['lon_bin'] + grid_size/2, min(1.0, row['count']/10)])
        
        all_frames.append({
            'data': frame_data,
            'date': date.strftime('%Y-%m-%d')
        })
    
    # Ajouter les pr√©visions
    for i, row in forecast_data.iterrows():
        date = row['date']
        predicted_fires = row['pr√©vision']
        
        # Distribuer les feux pr√©vus selon la distribution spatiale historique
        frame_data = []
        for _, grid_cell in grid_counts.iterrows():
            # Calculer le nombre de feux pr√©vu pour cette cellule
            cell_fires = predicted_fires * grid_cell['pct']
            if cell_fires > 0:
                frame_data.append([
                    grid_cell['lat_bin'] + grid_size/2, 
                    grid_cell['lon_bin'] + grid_size/2, 
                    min(1.0, cell_fires/10)  # Normaliser l'intensit√©
                ])
        
        all_frames.append({
            'data': frame_data,
            'date': date.strftime('%Y-%m-%d') + ' (pr√©vision)'
        })
    
    # Cr√©er la carte de base
    center_lat = df['latitude'].mean()
    center_lon = df['longitude'].mean()
    
    m = folium.Map(location=[center_lat, center_lon], zoom_start=6, tiles="CartoDB positron")
    
    # Ajouter des tuiles suppl√©mentaires
    folium.TileLayer('CartoDB dark_matter', name='Dark Map', attr='CartoDB').add_to(m)
    folium.TileLayer('Stamen Terrain', name='Terrain', attr='Stamen Design | OpenStreetMap').add_to(m)
    
    # Cr√©er un plugin HeatMapWithTime
    from folium.plugins import HeatMapWithTime
    
    # Pr√©parer les donn√©es pour HeatMapWithTime
    heat_data = [frame['data'] for frame in all_frames]
    heat_timestamps = [frame['date'] for frame in all_frames]
    
    # Ajouter le plugin HeatMapWithTime √† la carte
    HeatMapWithTime(
        heat_data,
        index=heat_timestamps,
        auto_play=True,
        max_opacity=0.8,
        radius=10,
        use_local_extrema=True
    ).add_to(m)
    
    # Ajouter une l√©gende
    legend_html = """
    <div style="position: fixed; 
                bottom: 50px; right: 50px; width: 220px; height: 120px; 
                border:2px solid grey; z-index:9999; font-size:12px;
                background-color:white; padding: 10px;
                border-radius: 5px;">
        <span style="font-weight: bold;">L√©gende</span><br>
        <i class="fa fa-circle" style="color:green;"></i> Intensit√© faible<br>
        <i class="fa fa-circle" style="color:orange;"></i> Intensit√© moyenne<br>
        <i class="fa fa-circle" style="color:red;"></i> Intensit√© √©lev√©e<br>
        <hr style="margin: 5px 0;">
        <span style="font-style: italic;">Les dates avec "(pr√©vision)" sont des projections bas√©es sur les tendances historiques</span>
    </div>
    """
    
    m.get_root().html.add_child(folium.Element(legend_html))
    
    # Ajouter le contr√¥le de couches
    folium.LayerControl().add_to(m)
    
    return m

def create_forecast_animation_gif(df, forecast_data, grid_size=0.1, freq='M', period=6, dpi=100):
    """Cr√©er une animation GIF des pr√©visions de feux
    
    Args:
        df: DataFrame avec les donn√©es historiques
        forecast_data: DataFrame avec les pr√©visions
        grid_size: Taille de la grille pour l'agr√©gation
        freq: Fr√©quence des pr√©visions ('D', 'W', 'M')
        period: Nombre de p√©riodes de pr√©vision
        dpi: R√©solution des images
        
    Returns:
        gif_path: Chemin vers le fichier GIF g√©n√©r√©
    """
    if df.empty or forecast_data is None:
        return None
    
    # Cr√©er un dossier temporaire pour stocker les images
    temp_dir = tempfile.mkdtemp()
    
    # 1. Cr√©er une grille spatiale des feux historiques
    df['lat_bin'] = np.floor(df['latitude'] / grid_size) * grid_size
    df['lon_bin'] = np.floor(df['longitude'] / grid_size) * grid_size
    
    # Compter les feux par cellule et calculer la distribution en pourcentage
    grid_counts = df.groupby(['lat_bin', 'lon_bin']).size().reset_index(name='count')
    grid_counts['pct'] = grid_counts['count'] / grid_counts['count'].sum()
    
    # 2. Pr√©parer les donn√©es historiques r√©centes et les pr√©visions
    last_date = df['date_heure'].max()
    
    # D√©finir la p√©riode historique et le delta de fr√©quence
    if freq == 'D':
        hist_period = pd.Timedelta(days=3)
        freq_delta = pd.Timedelta(days=1)
        time_unit = "jour"
    elif freq == 'W':
        hist_period = pd.Timedelta(weeks=3)
        freq_delta = pd.Timedelta(weeks=1)
        time_unit = "semaine"
    else:  # 'M'
        hist_period = pd.Timedelta(days=90)  # ~3 mois
        freq_delta = pd.Timedelta(days=30)  # ~1 mois
        time_unit = "mois"
    
    # Filtrer les donn√©es historiques r√©centes
    recent_df = df[df['date_heure'] > (last_date - hist_period)]
    
    # Agr√©ger par p√©riode et par cellule
    if freq == 'D':
        recent_grouped = recent_df.groupby(['lat_bin', 'lon_bin', pd.Grouper(key='date_heure', freq='D')])
    elif freq == 'W':
        recent_grouped = recent_df.groupby(['lat_bin', 'lon_bin', pd.Grouper(key='date_heure', freq='W')])
    else:  # 'M'
        recent_grouped = recent_df.groupby(['lat_bin', 'lon_bin', pd.Grouper(key='date_heure', freq='M')])
    
    recent_counts = recent_grouped.size().reset_index(name='count')
    
    # 3. G√©n√©rer une image pour chaque p√©riode
    all_frames = []
    frame_paths = []
    
    # D√©terminer les limites de la carte
    min_lat = df['latitude'].min() - 1
    max_lat = df['latitude'].max() + 1
    min_lon = df['longitude'].min() - 1
    max_lon = df['longitude'].max() + 1
    
    # Cr√©er un colormap pour les intensit√©s de feu
    cmap = plt.cm.get_cmap('YlOrRd')
    
    # Ajouter les donn√©es historiques
    for date, group in recent_counts.groupby('date_heure'):
        fig, ax = plt.subplots(figsize=(10, 8), dpi=dpi)
        
        # Tracer les fronti√®res du Cameroun (simplifi√©es)
        # Note: Dans une version r√©elle, on utiliserait un shapefile des fronti√®res
        cameroon_lat = [2, 4, 6, 8, 10, 12, 13, 12, 10, 8, 6, 4, 2]
        cameroon_lon = [9, 8, 9, 10, 13, 15, 14, 15, 15, 14, 13, 11, 9]
        ax.plot(cameroon_lon, cameroon_lat, 'k-', linewidth=1, alpha=0.5)
        
        # D√©finir les limites de la carte
        ax.set_xlim(min_lon, max_lon)
        ax.set_ylim(min_lat, max_lat)
        
        # Tracer les points de feu
        intensities = []
        for _, row in group.iterrows():
            intensity = min(1.0, row['count']/10)
            intensities.append(intensity)
            ax.scatter(row['lon_bin'] + grid_size/2, row['lat_bin'] + grid_size/2, 
                      s=intensity*100, c=[cmap(intensity)], alpha=0.7)
        
        # Ajouter un titre et des informations
        ax.set_title(f"Activit√© des feux au Cameroun\n{date.strftime('%d %B %Y')}", fontsize=14)
        ax.set_xlabel('Longitude', fontsize=12)
        ax.set_ylabel('Latitude', fontsize=12)
        
        # Ajouter une l√©gende
        handles = [
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=cmap(0.2), markersize=8, label='Faible intensit√©'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=cmap(0.5), markersize=12, label='Intensit√© moyenne'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=cmap(0.9), markersize=16, label='Forte intensit√©')
        ]
        ax.legend(handles=handles, loc='lower right')
        
        # Ajouter une indication que c'est une donn√©e historique
        ax.text(0.5, 0.02, "Donn√©es historiques", transform=ax.transAxes,
                ha='center', va='bottom', fontsize=10, color='blue',
                bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="blue", alpha=0.8))
        
        # Enregistrer l'image
        frame_path = os.path.join(temp_dir, f"frame_{len(frame_paths):03d}.png")
        plt.savefig(frame_path, bbox_inches='tight')
        plt.close(fig)
        
        frame_paths.append(frame_path)
    
    # Ajouter les pr√©visions
    for i, row in forecast_data.iterrows():
        date = row['date']
        predicted_fires = max(0, row['pr√©vision'])  # Assurer que c'est positif
        
        fig, ax = plt.subplots(figsize=(10, 8), dpi=dpi)
        
        # Tracer les fronti√®res du Cameroun
        ax.plot(cameroon_lon, cameroon_lat, 'k-', linewidth=1, alpha=0.5)
        
        # D√©finir les limites de la carte
        ax.set_xlim(min_lon, max_lon)
        ax.set_ylim(min_lat, max_lat)
        
        # Distribuer les feux pr√©vus selon la distribution spatiale historique
        for _, grid_cell in grid_counts.iterrows():
            # Calculer le nombre de feux pr√©vu pour cette cellule
            cell_fires = predicted_fires * grid_cell['pct']
            if cell_fires > 0:
                intensity = min(1.0, cell_fires/10)
                ax.scatter(grid_cell['lon_bin'] + grid_size/2, grid_cell['lat_bin'] + grid_size/2, 
                          s=intensity*100, c=[cmap(intensity)], alpha=0.7)
        
        # Ajouter un titre et des informations
        ax.set_title(f"Pr√©vision d'activit√© des feux au Cameroun\n{date.strftime('%d %B %Y')}", fontsize=14)
        ax.set_xlabel('Longitude', fontsize=12)
        ax.set_ylabel('Latitude', fontsize=12)
        
        # Ajouter une l√©gende
        handles = [
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=cmap(0.2), markersize=8, label='Faible intensit√©'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=cmap(0.5), markersize=12, label='Intensit√© moyenne'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=cmap(0.9), markersize=16, label='Forte intensit√©')
        ]
        ax.legend(handles=handles, loc='lower right')
        
        # Ajouter une indication que c'est une pr√©vision
        ax.text(0.5, 0.02, f"PR√âVISION (bas√©e sur les tendances historiques)", transform=ax.transAxes,
                ha='center', va='bottom', fontsize=10, color='red', fontweight='bold',
                bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="red", alpha=0.8))
        
        # Ajouter une valeur pr√©vue
        ax.text(0.5, 0.97, f"Nombre de feux pr√©vus: {int(predicted_fires)}", transform=ax.transAxes,
                ha='center', va='top', fontsize=12, color='black',
                bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="black", alpha=0.8))
        
        # Enregistrer l'image
        frame_path = os.path.join(temp_dir, f"frame_{len(frame_paths):03d}.png")
        plt.savefig(frame_path, bbox_inches='tight')
        plt.close(fig)
        
        frame_paths.append(frame_path)
    
    # 4. Cr√©er le GIF avec imageio
    frames = []
    for frame_path in frame_paths:
        frames.append(imageio.imread(frame_path))
    
    # Cr√©er le GIF dans le dossier temporaire
    gif_path = os.path.join(temp_dir, "forecast_animation.gif")
    imageio.mimsave(gif_path, frames, duration=1.0)  # 1 seconde par image
    
    return gif_path

def forecast_fire_activity(df, period=6, freq='M'):
    """R√©aliser des pr√©visions sur l'activit√© des feux
    
    Args:
        df: DataFrame contenant les donn√©es des feux
        period: Nombre de p√©riodes √† pr√©voir
        freq: Fr√©quence ('D' pour jour, 'W' pour semaine, 'M' pour mois)
        
    Returns:
        figures: Liste de figures pour les pr√©visions
        forecast_data: DataFrame avec les pr√©visions
        insights: Liste d'insights sur les pr√©visions
    """
    if df.empty:
        return None, None, []
    
    figures = []
    insights = []
    
    # Agr√©ger les donn√©es selon la fr√©quence
    if freq == 'D':
        time_unit = 'jours'
        df_time = df.groupby(pd.Grouper(key='date_heure', freq='D')).size().reset_index(name='count')
    elif freq == 'W':
        time_unit = 'semaines'
        df_time = df.groupby(pd.Grouper(key='date_heure', freq='W')).size().reset_index(name='count')
    else:  # 'M' par d√©faut
        time_unit = 'mois'
        df_time = df.groupby(pd.Grouper(key='date_heure', freq='M')).size().reset_index(name='count')
    
    # V√©rifier si nous avons assez de donn√©es pour les pr√©visions
    if len(df_time) < 4:
        insights.append("Pas assez de donn√©es pour r√©aliser des pr√©visions fiables. Au moins 4 points temporels sont n√©cessaires.")
        return None, None, insights
    
    # Pr√©parer les donn√©es pour le forecasting
    # D√©finir explicitement la fr√©quence pour √©viter les avertissements
    df_time = df_time.set_index('date_heure')
    if freq == 'D':
        df_time.index = pd.DatetimeIndex(df_time.index.values, freq='D')
    elif freq == 'W':
        df_time.index = pd.DatetimeIndex(df_time.index.values, freq='W')
    else:  # 'M' par d√©faut
        df_time.index = pd.DatetimeIndex(df_time.index.values, freq='M')
    
    try:
        # M√©thode 1: R√©gression simple
        # Utilisons d'abord une approche simple qui est plus robuste
        try:
            # Pr√©paration des donn√©es pour la r√©gression
            X = np.array(range(len(df_time))).reshape(-1, 1)
            y = df_time['count'].values
            
            # Ajuster un mod√®le de r√©gression lin√©aire
            model = LinearRegression()
            model.fit(X, y)
            
            # Pr√©dictions pour les donn√©es historiques et futures
            hist_pred = model.predict(X)
            future_X = np.array(range(len(df_time), len(df_time) + period)).reshape(-1, 1)
            future_pred = model.predict(future_X)
            
            # S'assurer que les pr√©visions sont positives
            future_pred = np.maximum(0, future_pred)
            
            # Visualisation de la tendance √† long terme
            fig_trend = go.Figure()
            
            # Donn√©es historiques
            fig_trend.add_trace(go.Scatter(
                x=df_time.index,
                y=df_time['count'],
                mode='lines+markers',
                name='Historique',
                line=dict(color='blue')
            ))
            
            # Tendance historique
            fig_trend.add_trace(go.Scatter(
                x=df_time.index,
                y=hist_pred,
                mode='lines',
                name='Tendance historique',
                line=dict(color='green')
            ))
            
            # Pr√©vision de la tendance
            future_dates = pd.date_range(start=df_time.index[-1] + pd.Timedelta(days=1), periods=period, freq=freq)
            fig_trend.add_trace(go.Scatter(
                x=future_dates,
                y=future_pred,
                mode='lines',
                name='Tendance future',
                line=dict(color='red', dash='dash')
            ))
            
            fig_trend.update_layout(
                title="Analyse de la tendance √† long terme des feux",
                xaxis_title="Date",
                yaxis_title="Nombre de feux",
                legend_title="L√©gende",
                hovermode="x unified"
            )
            
            figures.append(fig_trend)
            
            # Cr√©er un DataFrame pour les pr√©visions
            forecast_df = pd.DataFrame({
                'date': future_dates,
                'pr√©vision': future_pred,
                'limite_inf√©rieure': future_pred * 0.8,  # Estimation simple des limites
                'limite_sup√©rieure': future_pred * 1.2   # pour l'intervalle de confiance
            })
            
            # Extraire des insights sur la tendance
            slope = model.coef_[0]
            annual_change = slope * (12 if freq == 'M' else 52 if freq == 'W' else 365)
            
            if slope > 0:
                trend_intensity = "forte" if slope > 0.1 else "l√©g√®re"
                insights.append(f"Tendance √† la hausse {trend_intensity} d√©tect√©e : environ {annual_change:.1f} feux suppl√©mentaires par an.")
            elif slope < 0:
                trend_intensity = "forte" if slope < -0.1 else "l√©g√®re"
                insights.append(f"Tendance √† la baisse {trend_intensity} d√©tect√©e : environ {abs(annual_change):.1f} feux de moins par an.")
            else:
                insights.append("Aucune tendance significative d√©tect√©e sur le long terme.")
        
        except Exception as e:
            insights.append(f"Impossible de r√©aliser des pr√©visions par r√©gression: {str(e)}")
        
        # M√©thode 2: ARIMA (p,d,q) - mod√®le plus complexe mais parfois instable
        try:
            # Supprimons les avertissements pour une meilleure exp√©rience utilisateur
            import warnings
            warnings.filterwarnings("ignore")
            
            # Diff√©rencier les donn√©es pour assurer la stationnarit√©
            from statsmodels.tsa.stattools import adfuller
            
            # Tester la stationnarit√©
            adf_result = adfuller(df_time['count'])
            is_stationary = adf_result[1] < 0.05  # p-value < 0.05 indique stationnarit√©
            
            # D√©terminer l'ordre de diff√©renciation
            d = 0 if is_stationary else 1
            
            # Utiliser une sp√©cification simple et robuste du mod√®le ARIMA
            p, q = 1, 1  # Ordres simples qui convergent g√©n√©ralement bien
            
            # Cr√©er et ajuster le mod√®le avec plus d'it√©rations et une m√©thode d'optimisation robuste
            model = ARIMA(df_time['count'], order=(p, d, q))
            model_fit = model.fit(maxiter=1000, method='powell', disp=0)
            
            # R√©aliser les pr√©visions
            last_date = df_time.index[-1]
            forecast_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=period, freq=freq)
            forecast = model_fit.forecast(steps=period)
            
            # S'assurer que les pr√©visions sont positives
            forecast = np.maximum(0, forecast)
            
            # Calculer l'erreur standard pour l'intervalle de confiance
            std_err = np.std(model_fit.resid) if hasattr(model_fit, 'resid') else forecast.std() * 0.1
            
            # Mettre √† jour ou cr√©er le DataFrame de pr√©visions
            if 'forecast_df' in locals():
                # Moyenne pond√©r√©e des deux mod√®les pour des pr√©visions plus robustes
                forecast_df['pr√©vision'] = (forecast_df['pr√©vision'] + forecast) / 2
                forecast_df['limite_inf√©rieure'] = np.maximum(0, forecast - 2*std_err)
                forecast_df['limite_sup√©rieure'] = forecast + 2*std_err
            else:
                forecast_df = pd.DataFrame({
                    'date': forecast_dates,
                    'pr√©vision': forecast,
                    'limite_inf√©rieure': np.maximum(0, forecast - 2*std_err),
                    'limite_sup√©rieure': forecast + 2*std_err
                })
            
            # Visualisation des pr√©visions ARIMA
            fig_arima = go.Figure()
            
            # Donn√©es historiques
            fig_arima.add_trace(go.Scatter(
                x=df_time.index,
                y=df_time['count'],
                mode='lines+markers',
                name='Historique',
                line=dict(color='blue')
            ))
            
            # Pr√©visions
            fig_arima.add_trace(go.Scatter(
                x=forecast_df['date'],
                y=forecast_df['pr√©vision'],
                mode='lines+markers',
                name='Pr√©vision ARIMA',
                line=dict(color='red', dash='dash')
            ))
            
            # Intervalle de confiance
            fig_arima.add_trace(go.Scatter(
                x=forecast_df['date'].tolist() + forecast_df['date'].tolist()[::-1],
                y=forecast_df['limite_sup√©rieure'].tolist() + forecast_df['limite_inf√©rieure'].tolist()[::-1],
                fill='toself',
                fillcolor='rgba(255,0,0,0.2)',
                line=dict(color='rgba(255,255,255,0)'),
                name='Intervalle de confiance 95%'
            ))
            
            fig_arima.update_layout(
                title=f"Pr√©vision du nombre de feux pour les {period} prochains {time_unit}",
                xaxis_title="Date",
                yaxis_title="Nombre de feux",
                legend_title="L√©gende",
                hovermode="x unified"
            )
            
            # Ins√©rer ce graphique en premi√®re position car c'est le plus important
            figures.insert(0, fig_arima)
            
            # Extraire des insights du mod√®le
            max_forecast_date = forecast_df.loc[forecast_df['pr√©vision'].idxmax(), 'date']
            max_forecast_value = forecast_df['pr√©vision'].max()
            
            insights.insert(0, f"La plus forte activit√© de feux est pr√©vue autour du {max_forecast_date.strftime('%d/%m/%Y')} avec environ {int(max_forecast_value)} feux attendus.")
            
            if forecast_df['pr√©vision'].iloc[-1] > df_time['count'].mean():
                insights.insert(1, f"Tendance √† la hausse : l'activit√© des feux devrait √™tre sup√©rieure √† la moyenne historique ({df_time['count'].mean():.1f}) dans les prochains {time_unit}.")
            else:
                insights.insert(1, f"Tendance √† la baisse : l'activit√© des feux devrait √™tre inf√©rieure √† la moyenne historique ({df_time['count'].mean():.1f}) dans les prochains {time_unit}.")
        
        except Exception as e:
            # Si ARIMA √©choue, nous avons toujours les pr√©visions par r√©gression
            insights.append(f"Note: Le mod√®le ARIMA avanc√© n'a pas converg√©, mais les pr√©visions de tendance sont toujours valides.")
        
        # M√©thode 3: Analyse de saisonnalit√© (si applicable)
        if freq == 'M' and len(df_time) >= 12:
            # Analyser la saisonnalit√© mensuelle
            months = []
            counts = []
            
            for month in range(1, 13):
                month_data = df_time[df_time.index.month == month]
                if not month_data.empty:
                    months.append(calendar.month_name[month])
                    counts.append(month_data['count'].mean())
            
            if months and counts:
                seasonal_df = pd.DataFrame({
                    'Mois': months,
                    'Moyenne de feux': counts
                })
                
                # Ordonner les mois correctement
                month_order = {month: i for i, month in enumerate(calendar.month_name[1:])}
                seasonal_df['month_num'] = seasonal_df['Mois'].map(month_order)
                seasonal_df = seasonal_df.sort_values('month_num')
                
                # Visualisation de la saisonnalit√©
                fig_seasonal = px.bar(seasonal_df, x='Mois', y='Moyenne de feux',
                                      title="Saisonnalit√© des feux par mois",
                                      labels={'Moyenne de feux': 'Nombre moyen de feux'})
                
                figures.append(fig_seasonal)
                
                # Identifier les mois √† haut risque
                high_risk_months = seasonal_df.nlargest(3, 'Moyenne de feux')['Mois'].tolist()
                insights.append(f"Mois √† plus haut risque d'incendie : {', '.join(high_risk_months)}")
                
                low_risk_months = seasonal_df.nsmallest(3, 'Moyenne de feux')['Mois'].tolist()
                insights.append(f"Mois √† plus faible risque d'incendie : {', '.join(low_risk_months)}")
        
        # R√©activer les avertissements
        warnings.resetwarnings()
        
        return figures, forecast_df if 'forecast_df' in locals() else None, insights
    
    except Exception as e:
        insights.append(f"Erreur lors des pr√©visions: {str(e)}")
        return None, None, insights

def create_detailed_report(df, filtered_df, hotspots_df=None, forecast_insights=None):
    """G√©n√©rer un rapport d√©taill√© sur les donn√©es de feux avec des recommandations bas√©es sur les donn√©es r√©elles"""
    buffer = io.BytesIO()
    
    # Cr√©er le HTML pour le rapport
    report_html = f"""
    <html>
    <head>
        <title>Rapport d√©taill√© sur les feux au Cameroun</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }}
            h1 {{ color: #d9534f; }}
            h2 {{ color: #f0ad4e; margin-top: 30px; border-bottom: 1px solid #ddd; padding-bottom: 10px; }}
            h3 {{ color: #5bc0de; }}
            table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
            th {{ background-color: #f5f5f5; }}
            tr:nth-child(even) {{ background-color: #f9f9f9; }}
            .highlight {{ background-color: #fff3cd; padding: 15px; border-left: 5px solid #ffc107; margin: 20px 0; }}
            .critical {{ background-color: #f8d7da; padding: 15px; border-left: 5px solid #dc3545; margin: 20px 0; }}
            .success {{ background-color: #d4edda; padding: 15px; border-left: 5px solid #28a745; margin: 20px 0; }}
            .footer {{ margin-top: 50px; font-size: 0.8em; color: #777; text-align: center; }}
            .chart {{ max-width: 100%; height: auto; margin: 20px 0; }}
        </style>
    </head>
    <body>
        <h1>Rapport d√©taill√© sur les feux au Cameroun</h1>
        <p>Date de g√©n√©ration: {datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
        
        <div class="highlight">
            <h3>R√©sum√© ex√©cutif</h3>
            <p>Ce rapport pr√©sente une analyse d√©taill√©e des donn√©es VIIRS sur les feux au Cameroun pour la p√©riode du {filtered_df['date_heure'].min().strftime('%d/%m/%Y')} au {filtered_df['date_heure'].max().strftime('%d/%m/%Y')}. 
            Il identifie les zones √† haut risque, les tendances temporelles et fournit des recommandations bas√©es sur l'analyse des {len(filtered_df):,} points de feux d√©tect√©s.</p>
    """
    
    # Ajouter des points cl√©s au r√©sum√© ex√©cutif
    if not filtered_df.empty:
        # Identifier les r√©gions les plus touch√©es
        regions = {
            'Nord': (filtered_df['latitude'] > 8.0) & (filtered_df['longitude'] > 12.0) & (filtered_df['longitude'] < 15.0),
            'Extr√™me-Nord': (filtered_df['latitude'] > 10.0) & (filtered_df['longitude'] > 13.0),
            'Adamaoua': (filtered_df['latitude'] > 6.0) & (filtered_df['latitude'] < 8.0) & (filtered_df['longitude'] > 11.0) & (filtered_df['longitude'] < 15.0),
            'Est': (filtered_df['latitude'] > 2.0) & (filtered_df['latitude'] < 6.0) & (filtered_df['longitude'] > 13.0),
            'Centre': (filtered_df['latitude'] > 3.0) & (filtered_df['latitude'] < 6.0) & (filtered_df['longitude'] > 10.0) & (filtered_df['longitude'] < 13.0),
            'Sud': (filtered_df['latitude'] < 3.0) & (filtered_df['longitude'] > 10.0) & (filtered_df['longitude'] < 14.0),
            'Littoral': (filtered_df['latitude'] > 3.0) & (filtered_df['latitude'] < 5.0) & (filtered_df['longitude'] > 9.0) & (filtered_df['longitude'] < 10.5),
            'Sud-Ouest': (filtered_df['latitude'] > 4.0) & (filtered_df['latitude'] < 6.0) & (filtered_df['longitude'] > 8.0) & (filtered_df['longitude'] < 10.0),
            'Nord-Ouest': (filtered_df['latitude'] > 5.5) & (filtered_df['latitude'] < 7.0) & (filtered_df['longitude'] > 9.5) & (filtered_df['longitude'] < 11.0),
            'Ouest': (filtered_df['latitude'] > 5.0) & (filtered_df['latitude'] < 6.0) & (filtered_df['longitude'] > 10.0) & (filtered_df['longitude'] < 11.0)
        }
        
        region_counts = {}
        for region, mask in regions.items():
            region_counts[region] = len(filtered_df[mask])
        
        # Trier les r√©gions par nombre de feux
        region_counts = {k: v for k, v in sorted(region_counts.items(), key=lambda item: item[1], reverse=True) if v > 0}
        
        # Identifier le mois avec le plus de feux
        monthly_counts = filtered_df.groupby(filtered_df['date_heure'].dt.month).size()
        max_month_num = monthly_counts.idxmax()
        max_month_name = calendar.month_name[max_month_num]
        
        # Ajouter les points cl√©s au r√©sum√©
        if region_counts:
            top_region = list(region_counts.keys())[0]
            report_html += f"""
            <p><strong>Points cl√©s :</strong></p>
            <ul>
                <li>La r√©gion du <strong>{top_region}</strong> est la plus touch√©e avec {region_counts[top_region]:,} feux d√©tect√©s ({region_counts[top_region]/len(filtered_df)*100:.1f}% du total).</li>
                <li>Le mois de <strong>{max_month_name}</strong> pr√©sente la plus forte activit√© de feux ({monthly_counts.max():,} d√©tections).</li>
            """
            
            # Ajouter des informations sur la confiance des d√©tections
            if 'confidence' in filtered_df.columns:
                high_conf_pct = len(filtered_df[filtered_df['confidence'] == 'h']) / len(filtered_df) * 100
                report_html += f"""
                <li>{high_conf_pct:.1f}% des d√©tections sont de confiance √©lev√©e, sugg√©rant des donn√©es fiables pour la prise de d√©cision.</li>
                """
            
            # Ajouter des informations sur la distribution jour/nuit
            day_pct = len(filtered_df[filtered_df['daynight'] == 'D']) / len(filtered_df) * 100
            night_pct = 100 - day_pct
            report_html += f"""
                <li>R√©partition jour/nuit : {day_pct:.1f}% des feux sont d√©tect√©s pendant la journ√©e et {night_pct:.1f}% pendant la nuit.</li>
            </ul>
            """
        
        report_html += """
        </div>
        
        <h2>1. Statistiques g√©n√©rales</h2>
        <table>
            <tr>
                <th>M√©trique</th>
                <th>Valeur</th>
            </tr>
            <tr>
                <td>Nombre total de feux analys√©s</td>
                <td>{len(filtered_df):,}</td>
            </tr>
            <tr>
                <td>P√©riode couverte</td>
                <td>{filtered_df['date_heure'].min().strftime('%d/%m/%Y')} - {filtered_df['date_heure'].max().strftime('%d/%m/%Y')}</td>
            </tr>
            <tr>
                <td>Feux d√©tect√©s de jour</td>
                <td>{len(filtered_df[filtered_df['daynight'] == 'D']):,} ({len(filtered_df[filtered_df['daynight'] == 'D']) / len(filtered_df) * 100:.1f}%)</td>
            </tr>
            <tr>
                <td>Feux d√©tect√©s de nuit</td>
                <td>{len(filtered_df[filtered_df['daynight'] == 'N']):,} ({len(filtered_df[filtered_df['daynight'] == 'N']) / len(filtered_df) * 100:.1f}%)</td>
            </tr>
        """
    
    # Ajouter les statistiques sur la confiance des d√©tections
    if 'confidence' in filtered_df.columns:
        confidence_stats = filtered_df['confidence'].value_counts(normalize=True) * 100
        report_html += f"""
            <tr>
                <td>Feux √† confiance √©lev√©e (h)</td>
                <td>{len(filtered_df[filtered_df['confidence'] == 'h']):,} ({confidence_stats.get('h', 0):.1f}%)</td>
            </tr>
            <tr>
                <td>Feux √† confiance nominale (n)</td>
                <td>{len(filtered_df[filtered_df['confidence'] == 'n']):,} ({confidence_stats.get('n', 0):.1f}%)</td>
            </tr>
            <tr>
                <td>Feux √† confiance faible (l)</td>
                <td>{len(filtered_df[filtered_df['confidence'] == 'l']):,} ({confidence_stats.get('l', 0):.1f}%)</td>
            </tr>
        """
    
    # Ajouter les statistiques FRP si disponibles
    if 'frp' in filtered_df.columns:
        report_html += f"""
            <tr>
                <td>Puissance radiative moyenne (FRP)</td>
                <td>{filtered_df['frp'].mean():.2f} MW</td>
            </tr>
            <tr>
                <td>Puissance radiative maximale (FRP)</td>
                <td>{filtered_df['frp'].max():.2f} MW</td>
            </tr>
        """
    
    report_html += """
        </table>
        
        <h2>2. Analyse spatiale</h2>
    """
    
    # Ajouter l'analyse des hotspots
    if hotspots_df is not None and not hotspots_df.empty:
        report_html += f"""
        <h3>2.1 Zones √† forte pression de feu</h3>
        <p>Les {min(10, len(hotspots_df))} zones avec la plus forte concentration de feux sont pr√©sent√©es ci-dessous :</p>
        <table>
            <tr>
                <th>Rang</th>
                <th>Latitude</th>
                <th>Longitude</th>
                <th>Nombre de feux</th>
                {('<th>FRP moyenne (MW)</th>' if 'frp_mean' in hotspots_df.columns else '')}
            </tr>
        """
        
        for i, row in hotspots_df.head(10).iterrows():
            report_html += f"""
            <tr>
                <td>{i+1}</td>
                <td>{row['lat_bin']:.4f}</td>
                <td>{row['lon_bin']:.4f}</td>
                <td>{row['count']:,}</td>
                {(f'<td>{row["frp_mean"]:.2f}</td>' if 'frp_mean' in hotspots_df.columns else '')}
            </tr>
            """
        
        report_html += """
        </table>
        """
        
        # Ajouter une analyse des hotspots sp√©cifique
        if not hotspots_df.empty:
            # Identifier le hotspot principal
            top_hotspot = hotspots_df.iloc[0]
            
            # Calculer le pourcentage du total des feux dans les top 10 hotspots
            top10_count = hotspots_df.head(10)['count'].sum()
            top10_percentage = (top10_count / len(filtered_df)) * 100
            
            # D√©terminer si les hotspots sont concentr√©s ou dispers√©s
            concentration_level = "tr√®s concentr√©s" if top10_percentage > 50 else \
                                 "mod√©r√©ment concentr√©s" if top10_percentage > 25 else "dispers√©s"
            
            report_html += f"""
            <div class="critical">
                <h3>Analyse des hotspots</h3>
                <p>Le point chaud principal est situ√© √† <strong>{top_hotspot['lat_bin']:.4f}¬∞N, {top_hotspot['lon_bin']:.4f}¬∞E</strong> avec {top_hotspot['count']:,} feux d√©tect√©s.</p>
                <p>Les 10 principaux hotspots repr√©sentent <strong>{top10_percentage:.1f}%</strong> de tous les feux d√©tect√©s, indiquant que les feux sont <strong>{concentration_level}</strong> au Cameroun.</p>
            """
            
            # Ajouter des informations sur l'intensit√© si disponibles
            if 'frp_mean' in hotspots_df.columns:
                high_intensity_hotspots = hotspots_df[hotspots_df['frp_mean'] > hotspots_df['frp_mean'].mean()]
                high_intensity_count = len(high_intensity_hotspots)
                
                report_html += f"""
                <p>Parmi les zones identifi√©es, <strong>{high_intensity_count}</strong> pr√©sentent une intensit√© de feu (FRP) sup√©rieure √† la moyenne,
                sugg√©rant des feux particuli√®rement intenses qui pourraient n√©cessiter une attention prioritaire.</p>
                """
            
            report_html += """
            </div>
            """
    
    # Analyse de la distribution g√©ographique
    report_html += """
        <h3>2.2 Distribution g√©ographique</h3>
    """
    
    # Calculer la distribution par r√©gion (approximation bas√©e sur les coordonn√©es)
    if not filtered_df.empty:
        # D√©finir les r√©gions approximatives du Cameroun (simplifi√©)
        regions = {
            'Nord': (filtered_df['latitude'] > 8.0) & (filtered_df['longitude'] > 12.0) & (filtered_df['longitude'] < 15.0),
            'Extr√™me-Nord': (filtered_df['latitude'] > 10.0) & (filtered_df['longitude'] > 13.0),
            'Adamaoua': (filtered_df['latitude'] > 6.0) & (filtered_df['latitude'] < 8.0) & (filtered_df['longitude'] > 11.0) & (filtered_df['longitude'] < 15.0),
            'Est': (filtered_df['latitude'] > 2.0) & (filtered_df['latitude'] < 6.0) & (filtered_df['longitude'] > 13.0),
            'Centre': (filtered_df['latitude'] > 3.0) & (filtered_df['latitude'] < 6.0) & (filtered_df['longitude'] > 10.0) & (filtered_df['longitude'] < 13.0),
            'Sud': (filtered_df['latitude'] < 3.0) & (filtered_df['longitude'] > 10.0) & (filtered_df['longitude'] < 14.0),
            'Littoral': (filtered_df['latitude'] > 3.0) & (filtered_df['latitude'] < 5.0) & (filtered_df['longitude'] > 9.0) & (filtered_df['longitude'] < 10.5),
            'Sud-Ouest': (filtered_df['latitude'] > 4.0) & (filtered_df['latitude'] < 6.0) & (filtered_df['longitude'] > 8.0) & (filtered_df['longitude'] < 10.0),
            'Nord-Ouest': (filtered_df['latitude'] > 5.5) & (filtered_df['latitude'] < 7.0) & (filtered_df['longitude'] > 9.5) & (filtered_df['longitude'] < 11.0),
            'Ouest': (filtered_df['latitude'] > 5.0) & (filtered_df['latitude'] < 6.0) & (filtered_df['longitude'] > 10.0) & (filtered_df['longitude'] < 11.0)
        }
        
        region_counts = {}
        for region, mask in regions.items():
            region_counts[region] = len(filtered_df[mask])
        
        # Autres feux non classifi√©s
        total_classified = sum(region_counts.values())
        region_counts['Non classifi√©'] = len(filtered_df) - total_classified
        
        # Trier par nombre de feux d√©croissant
        region_counts = {k: v for k, v in sorted(region_counts.items(), key=lambda item: item[1], reverse=True)}
        
        report_html += """
        <p>Distribution approximative des feux par r√©gion :</p>
        <table>
            <tr>
                <th>R√©gion</th>
                <th>Nombre de feux</th>
                <th>Pourcentage</th>
            </tr>
        """
        
        for region, count in region_counts.items():
            report_html += f"""
            <tr>
                <td>{region}</td>
                <td>{count:,}</td>
                <td>{count / len(filtered_df) * 100:.1f}%</td>
            </tr>
            """
        
        report_html += """
        </table>
        """
        
        # Ajouter une analyse r√©gionale sp√©cifique
        top_regions = [k for k, v in region_counts.items() if v > 0 and k != 'Non classifi√©'][:3]
        if top_regions:
            report_html += """
            <div class="highlight">
                <h3>Zones prioritaires</h3>
            """
            
            for idx, region in enumerate(top_regions):
                count = region_counts[region]
                pct = count / len(filtered_df) * 100
                
                # G√©n√©rer des recommandations sp√©cifiques √† chaque r√©gion
                if region == 'Nord' or region == 'Extr√™me-Nord':
                    report_html += f"""
                    <p><strong>{idx+1}. R√©gion {region} ({pct:.1f}% des feux)</strong> - Zone de savane s√®che avec pratiques agricoles extensives.
                    Cette r√©gion n√©cessite une strat√©gie de gestion adapt√©e √† la vuln√©rabilit√© de la savane et aux pratiques
                    de br√ªlis agricoles. Recommandation : mise en place de pare-feux communautaires et introduction de
                    techniques agricoles alternatives au br√ªlis.</p>
                    """
                elif region == 'Est':
                    report_html += f"""
                    <p><strong>{idx+1}. R√©gion {region} ({pct:.1f}% des feux)</strong> - Zone foresti√®re avec progression de la d√©forestation.
                    Cette r√©gion n√©cessite une surveillance accrue des zones frontali√®res des aires prot√©g√©es. Recommandation :
                    renforcement des patrouilles dans les zones tampons des parcs nationaux et renforcement de l'application de la loi.</p>
                    """
                elif region == 'Adamaoua':
                    report_html += f"""
                    <p><strong>{idx+1}. R√©gion {region} ({pct:.1f}% des feux)</strong> - Zone de transition avec forte activit√© pastorale.
                    La pratique du br√ªlis pour le renouvellement des p√¢turages contribue significativement aux feux dans cette r√©gion.
                    Recommandation : travail avec les communaut√©s pastorales pour d√©velopper des syst√®mes de rotation des p√¢turages et
                    des p√©riodes contr√¥l√©es de br√ªlis.</p>
                    """
                else:
                    report_html += f"""
                    <p><strong>{idx+1}. R√©gion {region} ({pct:.1f}% des feux)</strong> - Cette r√©gion pr√©sente une concentration significative de feux
                    et devrait √™tre prioritaire pour les interventions de pr√©vention et de gestion. Recommandation : √©valuation d√©taill√©e
                    des causes sp√©cifiques √† la r√©gion et d√©veloppement d'une strat√©gie adapt√©e au contexte local.</p>
                    """
            
            report_html += """
            </div>
            """
    
    # Analyse temporelle
    report_html += """
        <h2>3. Analyse temporelle</h2>
    """
    
    if not filtered_df.empty:
        # Distribution par mois
        monthly_df = filtered_df.groupby(filtered_df['date_heure'].dt.month).size()
        monthly_df = monthly_df.reset_index()
        monthly_df.columns = ['Mois', 'Nombre de feux']
        monthly_df['Nom du mois'] = monthly_df['Mois'].apply(lambda x: calendar.month_name[x])
        
        report_html += """
        <h3>3.1 Distribution mensuelle</h3>
        <table>
            <tr>
                <th>Mois</th>
                <th>Nombre de feux</th>
                <th>Pourcentage</th>
            </tr>
        """
        
        for _, row in monthly_df.iterrows():
            report_html += f"""
            <tr>
                <td>{row['Nom du mois']}</td>
                <td>{row['Nombre de feux']:,}</td>
                <td>{row['Nombre de feux'] / len(filtered_df) * 100:.1f}%</td>
            </tr>
            """
        
        report_html += """
        </table>
        """
        
        # Mois avec le plus/moins de feux
        max_month = monthly_df.loc[monthly_df['Nombre de feux'].idxmax()]
        min_month = monthly_df.loc[monthly_df['Nombre de feux'].idxmin()]
        
        # Analyser les saisons de feux
        max_month_num = max_month['Mois']
        season = ""
        if max_month_num in [11, 12, 1, 2]:  # Saison s√®che Nord-Cameroun
            season = "saison s√®che"
            season_context = "Cette p√©riode correspond √† la saison s√®che dans le nord du pays, o√π l'absence de pr√©cipitations et la v√©g√©tation dess√©ch√©e favorisent les d√©parts de feu."
        elif max_month_num in [3, 4, 5]:  # Transition / d√©but de saison des pluies
            season = "fin de saison s√®che/d√©but de saison des pluies"
            season_context = "Cette p√©riode de transition entre saison s√®che et saison des pluies est souvent marqu√©e par des pratiques de d√©frichement agricole avant les semis."
        else:  # Saison des pluies / pr√©paration des cultures
            season = "saison des pluies"
            season_context = "Cette p√©riode correspond √† la saison des pluies dans plusieurs r√©gions, sugg√©rant des feux potentiellement li√©s √† la pr√©paration des terres agricoles malgr√© l'humidit√©."
        
        report_html += f"""
        <div class="highlight">
            <h3>Analyse saisonni√®re</h3>
            <p><strong>Pic saisonnier :</strong> {max_month['Nom du mois']} est le mois avec le plus grand nombre de feux ({max_month['Nombre de feux']:,}), repr√©sentant {max_month['Nombre de feux'] / len(filtered_df) * 100:.1f}% du total annuel.</p>
            <p><strong>Contexte saisonnier :</strong> Ce pic se produit durant la {season}. {season_context}</p>
            <p><strong>Creux saisonnier :</strong> {min_month['Nom du mois']} est le mois avec le moins de feux ({min_month['Nombre de feux']:,}).</p>
            <p><strong>Implications pour la gestion :</strong> Les ressources de pr√©vention et d'intervention devraient √™tre maximis√©es {max_month['Nom du mois']} mois avant le pic (en {calendar.month_name[(max_month_num-1) if max_month_num > 1 else 12]}) pour permettre la mise en place de mesures pr√©ventives efficaces.</p>
        </div>
        """
        
        # Distribution par heure (jour/nuit)
        if 'acq_time' in filtered_df.columns:
            filtered_df['heure'] = filtered_df['acq_time'] // 100
            hourly_df = filtered_df.groupby('heure').size().reset_index()
            hourly_df.columns = ['Heure', 'Nombre de feux']
            
            report_html += """
            <h3>3.2 Distribution horaire</h3>
            <p>R√©partition des feux par heure de d√©tection :</p>
            <table>
                <tr>
                    <th>Heure</th>
                    <th>Nombre de feux</th>
                    <th>Pourcentage</th>
                </tr>
            """
            
            for _, row in hourly_df.iterrows():
                report_html += f"""
                <tr>
                    <td>{row['Heure']:02d}h00</td>
                    <td>{row['Nombre de feux']:,}</td>
                    <td>{row['Nombre de feux'] / len(filtered_df) * 100:.1f}%</td>
                </tr>
                """
            
            report_html += """
            </table>
            """
            
            # Heures avec le plus/moins de feux
            max_hour = hourly_df.loc[hourly_df['Nombre de feux'].idxmax()]
            early_morning = hourly_df[(hourly_df['Heure'] >= 5) & (hourly_df['Heure'] <= 9)]
            afternoon = hourly_df[(hourly_df['Heure'] >= 13) & (hourly_df['Heure'] <= 17)]
            
            early_morning_total = early_morning['Nombre de feux'].sum() if not early_morning.empty else 0
            afternoon_total = afternoon['Nombre de feux'].sum() if not afternoon.empty else 0
            
            peak_period = "matin√©e" if early_morning_total > afternoon_total else "apr√®s-midi"
            
            report_html += f"""
            <p><strong>Pic horaire :</strong> {max_hour['Heure']:02d}h00 est l'heure avec le plus grand nombre de d√©tections ({max_hour['Nombre de feux']:,}).</p>
            <p><strong>Analyse de la distribution horaire :</strong> Les feux sont plus fr√©quents en {peak_period}, ce qui sugg√®re un lien avec les activit√©s humaines comme {"le d√©frichement agricole matinal" if peak_period == "matin√©e" else "les activit√©s agricoles et pastorales de l'apr√®s-midi"}.</p>
            """
    
    # Ajouter les pr√©visions et insights
    if forecast_insights:
        report_html += """
        <h2>4. Pr√©visions et tendances</h2>
        <div class="highlight">
        """
        
        for i, insight in enumerate(forecast_insights):
            report_html += f"""
            <p>{i+1}. {insight}</p>
            """
        
        report_html += """
        </div>
        """
    
    # G√©n√©rer des recommandations bas√©es sur les donn√©es r√©elles
    report_html += """
        <h2>5. Recommandations sp√©cifiques bas√©es sur l'analyse</h2>
    """
    
    # Cr√©ation de recommandations dynamiques bas√©es sur les donn√©es
    if not filtered_df.empty:
        # Analyser les tendances pour les recommandations
        has_seasonal_pattern = len(filtered_df.groupby(filtered_df['date_heure'].dt.month).size()) > 3
        has_spatial_hotspots = hotspots_df is not None and not hotspots_df.empty and hotspots_df['count'].max() > len(filtered_df) * 0.05
        
        # D√©terminer les r√©gions principales
        if region_counts:
            top_regions = [k for k, v in region_counts.items() if v > 0 and k != 'Non classifi√©'][:3]
        else:
            top_regions = []
        
        report_html += """
        <div class="critical">
            <h3>5.1 Actions prioritaires</h3>
            <ol>
        """
        
        # Recommandations spatiales
        if has_spatial_hotspots and hotspots_df is not None:
            top_hotspot = hotspots_df.iloc[0]
            second_hotspot = hotspots_df.iloc[1] if len(hotspots_df) > 1 else None
            
            report_html += f"""
                <li><strong>Intervention cibl√©e dans le hotspot principal ({top_hotspot['lat_bin']:.4f}¬∞N, {top_hotspot['lon_bin']:.4f}¬∞E) :</strong> 
                D√©ployer imm√©diatement des √©quipes de surveillance dans cette zone qui repr√©sente une concentration significative de feux.
                √âtablir une base op√©rationnelle temporaire pendant la saison des feux pour r√©duire les temps d'intervention.</li>
            """
            
            if second_hotspot is not None:
                report_html += f"""
                <li><strong>√âtablissement d'un p√©rim√®tre de s√©curit√© :</strong> 
                Cr√©er un r√©seau de pare-feux entre les deux principaux hotspots ({top_hotspot['lat_bin']:.4f}¬∞N, {top_hotspot['lon_bin']:.4f}¬∞E et 
                {second_hotspot['lat_bin']:.4f}¬∞N, {second_hotspot['lon_bin']:.4f}¬∞E) pour √©viter la propagation des incendies d'une zone critique √† l'autre.</li>
                """
        
        # Recommandations temporelles
        if has_seasonal_pattern:
            # D√©terminer le mois de d√©but de la saison des feux (2 mois avant le pic)
            max_month_num = max_month['Mois'] 
            prep_month_num = (max_month_num - 2) % 12
            if prep_month_num == 0:
                prep_month_num = 12
            prep_month = calendar.month_name[prep_month_num]
            
            report_html += f"""
                <li><strong>Mise en place d'un syst√®me d'alerte pr√©coce :</strong> 
                Intensifier la surveillance des conditions m√©t√©orologiques et de la v√©g√©tation d√®s {prep_month}, 
                soit 2 mois avant le pic saisonnier habituel. D√©ployer des observateurs communautaires form√©s
                pour signaler les d√©parts de feu.</li>
            """
        
        # Recommandations r√©gionales
        if top_regions:
            region_specific_recs = {
                'Nord': "Mettre en place un programme de br√ªlis contr√¥l√©s pr√©ventifs avant la saison s√®che et former les communaut√©s rurales √† ces techniques.",
                'Extr√™me-Nord': "D√©velopper un r√©seau de points d'eau strat√©giques accessibles aux √©quipes d'intervention et promouvoir les cultures r√©sistantes √† la s√©cheresse.",
                'Adamaoua': "Collaborer avec les √©leveurs pour √©tablir un calendrier rotatif des zones de p√¢turage pour √©viter la surexploitation et r√©duire le besoin de br√ªlis.",
                'Est': "√âtablir des zones tampons autour des aires prot√©g√©es et engager les communaut√©s limitrophes dans la surveillance participative.",
                'Centre': "Mettre en ≈ìuvre des programmes d'agroforesterie pour r√©duire la d√©pendance au d√©frichement par br√ªlis.",
                'Sud': "Renforcer la protection des zones foresti√®res primaires et secondaires et d√©velopper des alternatives √©conomiques √† l'exploitation non durable.",
                'Littoral': "D√©velopper des syst√®mes d'alerte pr√©coce autour des zones industrielles et des interfaces urbain-for√™t.",
                'Sud-Ouest': "√âtablir des corridors coupe-feu dans les zones de plantation et former les agriculteurs √† la gestion des r√©sidus de culture.",
                'Nord-Ouest': "Mettre en place un syst√®me communautaire de gestion des feux adapt√© au contexte montagneux de la r√©gion.",
                'Ouest': "Promouvoir des techniques agricoles sans feu et √©tablir des comit√©s locaux de vigilance."
            }
            
            for region in top_regions[:2]:  # Limiter √† 2 recommandations r√©gionales
                if region in region_specific_recs:
                    report_html += f"""
                    <li><strong>R√©gion {region} :</strong> {region_specific_recs[region]}</li>
                    """
        
        report_html += """
            </ol>
        </div>
        """
        
        # Recommandations de conservation
        report_html += """
        <h3>5.2 Conservation et gestion des √©cosyst√®mes</h3>
        """
        
        # Identifier les √©cosyst√®mes sensibles potentiellement affect√©s
        ecosystems = []
        if len(filtered_df[filtered_df['latitude'] > 8.0]) > len(filtered_df) * 0.3:
            ecosystems.append("savanes s√®ches du nord")
        if len(filtered_df[filtered_df['latitude'].between(6.0, 8.0) & filtered_df['longitude'].between(11.0, 15.0)]) > len(filtered_df) * 0.2:
            ecosystems.append("savanes humides de l'Adamaoua")
        if len(filtered_df[filtered_df['latitude'] < 6.0]) > len(filtered_df) * 0.2:
            ecosystems.append("for√™ts tropicales du sud")
        
        if ecosystems:
            report_html += """
            <ul>
            """
            
            for ecosystem in ecosystems:
                if "savanes s√®ches" in ecosystem:
                    report_html += f"""
                    <li><strong>Protection des {ecosystem} :</strong> Ces √©cosyst√®mes montrent une forte vuln√©rabilit√© aux feux d'apr√®s les donn√©es analys√©es.
                    Mettre en place un r√©seau de surveillance sp√©cifique et d√©velopper un programme de restauration des sols d√©grad√©s par les feux r√©p√©t√©s.</li>
                    """
                elif "savanes humides" in ecosystem:
                    report_html += f"""
                    <li><strong>Gestion int√©gr√©e des {ecosystem} :</strong> D√©velopper un mod√®le de gestion collaborative impliquant les √©leveurs et les agriculteurs
                    pour r√©duire les conflits d'usage qui conduisent souvent √† des feux d√©lib√©r√©s. Promouvoir des techniques de p√¢turage am√©lior√©es.</li>
                    """
                elif "for√™ts tropicales" in ecosystem:
                    report_html += f"""
                    <li><strong>Conservation des {ecosystem} :</strong> Renforcer la surveillance des lisi√®res foresti√®res qui montrent une activit√© de feu √©lev√©e.
                    √âtablir des zones tampons entre les zones agricoles et foresti√®res avec une transition progressive des usages.</li>
                    """
            
            report_html += """
            </ul>
            """
        else:
            report_html += """
            <p>Les donn√©es ne permettent pas d'identifier clairement les √©cosyst√®mes affect√©s. Une analyse plus d√©taill√©e croisant ces donn√©es avec des cartes d'√©cosyst√®mes est recommand√©e.</p>
            """
        
        # Recommandations pour l'intervention et la pr√©vention
        report_html += """
        <h3>5.3 Strat√©gies d'intervention et de pr√©vention</h3>
        """
        
        # Analyser les donn√©es pour des recommandations sp√©cifiques
        day_night_ratio = len(filtered_df[filtered_df['daynight'] == 'D']) / len(filtered_df[filtered_df['daynight'] == 'N']) if len(filtered_df[filtered_df['daynight'] == 'N']) > 0 else float('inf')
        
        report_html += """
        <ul>
        """
        
        # Recommandations bas√©es sur la distribution jour/nuit
        if day_night_ratio > 3:  # Beaucoup plus de feux de jour
            report_html += """
            <li><strong>Surveillance diurne renforc√©e :</strong> Les donn√©es montrent une forte pr√©dominance des feux diurnes,
            sugg√©rant des causes humaines d√©lib√©r√©es (d√©frichement agricole, br√ªlis pastoral). Concentrer les ressources de
            surveillance pendant les heures de jour et mettre en place des campagnes de sensibilisation cibl√©es sur ces pratiques.</li>
            """
        elif day_night_ratio < 0.5:  # Beaucoup plus de feux de nuit
            report_html += """
            <li><strong>Patrouilles nocturnes :</strong> La pr√©pond√©rance des feux nocturnes sugg√®re des activit√©s
            potentiellement ill√©gales (d√©frichement clandestin, braconnage). Mettre en place des patrouilles nocturnes
            dans les zones critiques et renforcer la l√©gislation contre les feux nocturnes non autoris√©s.</li>
            """
        else:  # Distribution √©quilibr√©e
            report_html += """
            <li><strong>Surveillance continue :</strong> La distribution √©quilibr√©e des feux entre jour et nuit n√©cessite
            une pr√©sence constante des √©quipes de surveillance. D√©velopper un syst√®me de rotation des √©quipes pour assurer
            une couverture 24/7 dans les zones prioritaires pendant la saison des feux.</li>
            """
        
        # Recommandation bas√©e sur les hotspots
        if has_spatial_hotspots and not hotspots_df.empty:
            report_html += f"""
            <li><strong>Cartographie dynamique du risque :</strong> D√©velopper une carte de risque d'incendie r√©guli√®rement mise √† jour
            et partag√©e avec les acteurs locaux. La concentration des feux dans des hotspots sp√©cifiques ({hotspots_df.iloc[0]['lat_bin']:.4f}¬∞N, {hotspots_df.iloc[0]['lon_bin']:.4f}¬∞E)
            sugg√®re que des interventions tr√®s cibl√©es peuvent avoir un impact significatif.</li>
            """
        
        # Recommandations bas√©es sur la confiance des d√©tections
        if 'confidence' in filtered_df.columns:
            high_conf_pct = len(filtered_df[filtered_df['confidence'] == 'h']) / len(filtered_df) * 100
            if high_conf_pct < 30:
                report_html += """
                <li><strong>Am√©lioration du syst√®me de d√©tection :</strong> Le faible pourcentage de d√©tections √† haute confiance
                sugg√®re la n√©cessit√© de compl√©ter les donn√©es satellitaires par des observations au sol. Mettre en place un r√©seau
                d'observateurs communautaires √©quip√©s d'une application mobile simple pour signaler et v√©rifier les feux.</li>
                """
        
        report_html += """
        </ul>
        """
        
        # Recommandations pour la sensibilisation et l'√©ducation
        report_html += """
        <h3>5.4 Sensibilisation et √©ducation</h3>
        <ul>
        """
        
        # Analyser la saisonnalit√© pour des recommandations sp√©cifiques
        if has_seasonal_pattern:
            # Calculer les mois pr√©c√©dant le pic
            max_month_num = max_month['Mois']
            pre_peak_month1 = (max_month_num - 1) if max_month_num > 1 else 12
            pre_peak_month2 = (max_month_num - 2) if max_month_num > 2 else (12 if max_month_num == 1 else 11)
            
            report_html += f"""
            <li><strong>Campagnes de sensibilisation saisonni√®res :</strong> Intensifier les efforts de sensibilisation
            deux mois avant le pic de feux observ√©, soit en {calendar.month_name[pre_peak_month2]} et {calendar.month_name[pre_peak_month1]}.
            Cibler sp√©cifiquement les √©coles, les associations d'agriculteurs et les groupements d'√©leveurs dans les zones √† haut risque.</li>
            """
            
            report_html += """
            <li><strong>Formation communautaire :</strong> D√©velopper un programme de formation des leaders communautaires
            aux techniques de pr√©vention et de gestion des feux. Ces personnes peuvent ensuite servir de relais d'information
            et de premiers intervenants dans leurs communaut√©s respectives.</li>
            """
        
        report_html += """
        </ul>
        
        <h3>5.5 Suivi et √©valuation</h3>
        <ul>
            <li><strong>Analyse d'impact :</strong> Mettre en place un syst√®me de suivi pour √©valuer l'efficacit√© des interventions
            en comparant les donn√©es avant et apr√®s mise en ≈ìuvre des recommandations.</li>
            <li><strong>Rapports p√©riodiques :</strong> Produire des analyses trimestrielles sur l'√©volution de la situation
            des feux pour ajuster les strat√©gies en fonction des r√©sultats observ√©s.</li>
            <li><strong>Collaboration scientifique :</strong> √âtablir des partenariats avec des institutions de recherche pour
            approfondir l'analyse des causes et des impacts des feux sur les √©cosyst√®mes camerounais.</li>
        </ul>
        """
        
        # Conclusion
        report_html += f"""
        <div class="success">
            <h3>Conclusion</h3>
            <p>Cette analyse de {len(filtered_df):,} points de feux d√©tect√©s au Cameroun entre le {filtered_df['date_heure'].min().strftime('%d/%m/%Y')} et le {filtered_df['date_heure'].max().strftime('%d/%m/%Y')}
            r√©v√®le des mod√®les spatiaux et temporels distincts qui peuvent guider efficacement les strat√©gies de gestion des feux.</p>
            
            <p>Les interventions cibl√©es dans les hotspots identifi√©s, combin√©es √† des approches pr√©ventives
            avant les p√©riodes de pic saisonnier, offrent la meilleure opportunit√© de r√©duire significativement l'incidence
            des feux et leurs impacts sur les √©cosyst√®mes et les communaut√©s.</p>
            
            <p>Un suivi r√©gulier de l'√©volution des tendances et l'adaptation des strat√©gies en cons√©quence seront
            essentiels pour maintenir l'efficacit√© des interventions √† long terme.</p>
        </div>
        
        <div class="footer">
            <p>Rapport g√©n√©r√© par l'application d'analyse des feux du Cameroun</p>
        </div>
    </body>
    </html>
    """
    
    return report_html

# Interface utilisateur
def main():
    st.title("üî• CM-FI (CAMEROON FireInsight)")
    
    # Barre lat√©rale pour le chargement des fichiers et les options
    with st.sidebar:
        st.header("Chargement des donn√©es")
        
        uploaded_files = st.file_uploader(
            "T√©l√©chargez vos fichiers CSV VIIRS (un par ann√©e)",
            type=["csv"],
            accept_multiple_files=True
        )
        
        if not uploaded_files:
            st.warning("Veuillez t√©l√©charger au moins un fichier CSV pour commencer l'analyse")
            
            # Exemple de donn√©es pour d√©monstration
            if st.button("Utiliser les donn√©es de d√©monstration"):
                # Dans un environnement r√©el, vous pourriez avoir des fichiers de d√©monstration
                st.info("Fonctionnalit√© de d√©monstration non disponible dans ce prototype")
        
        st.divider()
        st.header("Filtres")
        
        # Options de filtrage
        confidence_options = st.selectbox(
            "Niveau de confiance minimum",
            options=[('l', 'Faible (inclut tous)'), ('n', 'Nominal'), ('h', '√âlev√©')],
            format_func=lambda x: x[1],
            index=0
        )
        
        day_night = st.selectbox(
            "P√©riode",
            options=[('both', 'Jour et Nuit'), ('D', 'Jour seulement'), ('N', 'Nuit seulement')],
            format_func=lambda x: x[1],
            index=0
        )
        
        st.divider()
        st.header("Pr√©visions")
        forecast_period = st.slider(
            "P√©riode de pr√©vision",
            min_value=1,
            max_value=12,
            value=6,
            help="Nombre de p√©riodes √† pr√©voir dans le futur"
        )
        
        forecast_freq = st.selectbox(
            "Fr√©quence de pr√©vision",
            options=[('M', 'Mensuelle'), ('W', 'Hebdomadaire'), ('D', 'Journali√®re')],
            format_func=lambda x: x[1],
            index=0
        )
    
    # Chargement des donn√©es
    dfs = {}
    years_available = []
    
    if uploaded_files:
        for file in uploaded_files:
            # Extraction de l'ann√©e du nom de fichier (supposant format "viirssnpp_YYYY_*.csv")
            file_name = file.name
            try:
                year = int(file_name.split('_')[1])
            except:
                # Si l'ann√©e n'est pas dans le nom de fichier, l'extraire des donn√©es
                temp_df = pd.read_csv(file)
                if 'acq_date' in temp_df.columns:
                    year = pd.to_datetime(temp_df['acq_date']).dt.year.mode()[0]
                else:
                    year = datetime.now().year
            
            df = load_data(file)
            if df is not None:
                dfs[year] = df
                years_available.append(year)
        
        if dfs:
            # Combiner tous les DataFrames
            all_data = pd.concat(dfs.values())
            
            # Appliquer les filtres
            filtered_data = filter_data(
                all_data, 
                confidence_min=confidence_options[0],
                day_night=day_night[0] if day_night[0] != 'both' else None
            )
            
            # Cr√©er les onglets pour diff√©rentes analyses
            tab1, tab2, tab3, tab4, tab5 = st.tabs([
                "Zones √† forte pression de feu", 
                "S√©rie temporelle", 
                "Comparaison entre ann√©es",
                "Pr√©visions",
                "Rapport d√©taill√©"
            ])
            
            with tab1:
                st.header("üó∫Ô∏è Analyse des zones √† forte pression de feu")
                
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.subheader("Carte des hotspots de feux")
                    
                    grid_size = st.slider(
                        "Taille de la grille (degr√©s)",
                        min_value=0.05,
                        max_value=0.5,
                        value=0.1,
                        step=0.05,
                        help="D√©finit la r√©solution de l'analyse des hotspots"
                    )
                    
                    hotspot_map, hotspots_df = create_hotspot_map(filtered_data, grid_size)
                    
                    if hotspot_map:
                        folium_static(hotspot_map, width=700)
                    else:
                        st.warning("Pas assez de donn√©es pour cr√©er la carte des hotspots")
                
                with col2:
                    st.subheader("Top zones √† risque")
                    
                    if not hotspots_df.empty:
                        top_n = min(10, len(hotspots_df))
                        st.dataframe(
                            hotspots_df.head(top_n).reset_index(drop=True)
                            .rename(columns={
                                'lat_bin': 'Latitude',
                                'lon_bin': 'Longitude',
                                'count': 'Nombre de feux',
                                'frp_mean': 'FRP moyenne'
                            }),
                            use_container_width=True
                        )
                        
                        # T√©l√©chargement des donn√©es
                        csv = hotspots_df.to_csv(index=False)
                        st.download_button(
                            label="T√©l√©charger les donn√©es de hotspots (CSV)",
                            data=csv,
                            file_name=f"hotspots_feux_cameroun.csv",
                            mime="text/csv"
                        )
                    else:
                        st.warning("Aucune donn√©e disponible pour l'analyse des hotspots")
            
            with tab2:
                st.header("üìà Analyse temporelle des feux")
                
                col1, col2 = st.columns([3, 1])
                
                with col2:
                    time_freq = st.radio(
                        "Fr√©quence d'analyse",
                        options=[
                            ('H', 'Horaire'),
                            ('D', 'Journali√®re'),
                            ('W', 'Hebdomadaire'),
                            ('M', 'Mensuelle')
                        ],
                        format_func=lambda x: x[1],
                        index=3
                    )
                    
                    # Date range selector (if applicable)
                    if filtered_data is not None and not filtered_data.empty:
                        min_date = filtered_data['date_heure'].min().date()
                        max_date = filtered_data['date_heure'].max().date()
                        
                        date_range = st.date_input(
                            "Plage de dates",
                            value=(min_date, max_date),
                            min_value=min_date,
                            max_value=max_date
                        )
                        
                        # Appliquer le filtre de date
                        if len(date_range) == 2:
                            time_data = filter_data(filtered_data, date_range=date_range)
                        else:
                            time_data = filtered_data
                    else:
                        time_data = filtered_data
                
                with col1:
                    # Cr√©er la s√©rie temporelle
                    time_fig = create_time_series(time_data, frequency=time_freq[0])
                    
                    if time_fig:
                        st.plotly_chart(time_fig, use_container_width=True)
                    else:
                        st.warning("Pas assez de donn√©es pour cr√©er la s√©rie temporelle")
            
            with tab3:
                st.header("üîÑ Comparaison entre ann√©es")
                
                if len(years_available) >= 2:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        year1 = st.selectbox(
                            "Premi√®re ann√©e",
                            options=sorted(years_available),
                            index=0
                        )
                    
                    with col2:
                        year2 = st.selectbox(
                            "Deuxi√®me ann√©e",
                            options=sorted(years_available),
                            index=min(1, len(years_available)-1)
                        )
                    
                    if year1 != year2:
                        # G√©n√©rer les comparaisons
                        fig_total, fig_monthly, fig_frp = compare_years(filtered_data, year1, year2)
                        
                        if fig_total and fig_monthly:
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.plotly_chart(fig_total, use_container_width=True)
                            
                            with col2:
                                if fig_frp:
                                    st.plotly_chart(fig_frp, use_container_width=True)
                            
                            st.plotly_chart(fig_monthly, use_container_width=True)
                        else:
                            st.warning("Impossible de g√©n√©rer la comparaison avec les donn√©es disponibles")
                    else:
                        st.warning("Veuillez s√©lectionner deux ann√©es diff√©rentes pour la comparaison")
                else:
                    st.warning(
                        "Pour comparer des ann√©es, vous devez t√©l√©charger des donn√©es pour au moins deux ann√©es diff√©rentes"
                    )
            
            with tab4:
                st.header("üîÆ Pr√©visions d'activit√© des feux")
                
                st.write("""
                Cette section utilise des mod√®les statistiques pour pr√©voir l'activit√© future des feux
                en se basant sur les tendances historiques et les mod√®les saisonniers.
                """)
                
                # G√©n√©rer les pr√©visions
                forecast_figures, forecast_data, forecast_insights = forecast_fire_activity(
                    filtered_data, 
                    period=forecast_period, 
                    freq=forecast_freq[0]
                )
                
                if forecast_figures:
                    for fig in forecast_figures:
                        st.plotly_chart(fig, use_container_width=True)
                    
                    # Afficher les insights
                    st.subheader("Insights cl√©s des pr√©visions")
                    for i, insight in enumerate(forecast_insights):
                        st.markdown(f"**{i+1}.** {insight}")
                    
                    # Afficher les donn√©es de pr√©vision
                    if forecast_data is not None:
                        st.subheader("Donn√©es de pr√©vision")
                        st.dataframe(forecast_data)
                        
                        # T√©l√©chargement des pr√©visions
                        csv = forecast_data.to_csv(index=False)
                        st.download_button(
                            label="T√©l√©charger les pr√©visions (CSV)",
                            data=csv,
                            file_name="previsions_feux_cameroun.csv",
                            mime="text/csv"
                        )
                        
                        # Cr√©er une carte anim√©e des pr√©visions
                        st.subheader("Carte anim√©e des pr√©visions")
                        col1, col2 = st.columns([1, 1])
                        
                        with col1:
                            st.write("""
                            Cette carte interactive montre l'√©volution temporelle des feux avec une animation, 
                            int√©grant √† la fois les donn√©es historiques r√©centes et les pr√©visions futures. 
                            Les zones rouges indiquent une forte activit√© de feux.
                            """)
                            
                            animated_map = create_animated_forecast_map(
                                filtered_data,
                                forecast_data,
                                period=forecast_period,
                                freq=forecast_freq[0]
                            )
                            
                            if animated_map:
                                folium_static(animated_map, width=400, height=400)
                            else:
                                st.warning("Impossible de g√©n√©rer la carte anim√©e des pr√©visions.")
                        
                        with col2:
                            st.write("""
                            Vous pouvez √©galement t√©l√©charger une animation GIF qui montre l'√©volution des feux
                            au fil du temps. Cette animation peut √™tre facilement partag√©e et visionn√©e sans 
                            l'application.
                            """)
                            
                            if st.button("G√©n√©rer l'animation GIF des pr√©visions"):
                                with st.spinner("G√©n√©ration de l'animation en cours..."):
                                    gif_path = create_forecast_animation_gif(
                                        filtered_data,
                                        forecast_data,
                                        grid_size=0.1,
                                        freq=forecast_freq[0],
                                        period=forecast_period
                                    )
                                    
                                    if gif_path and os.path.exists(gif_path):
                                        # Lire le GIF en tant que bytes
                                        with open(gif_path, "rb") as file:
                                            gif_bytes = file.read()
                                        
                                        # Afficher le GIF
                                        st.image(gif_bytes, caption="Animation des pr√©visions de feux", use_column_width=True)
                                        
                                        # Bouton de t√©l√©chargement
                                        st.download_button(
                                            label="T√©l√©charger l'animation GIF",
                                            data=gif_bytes,
                                            file_name="previsions_feux_cameroun.gif",
                                            mime="image/gif"
                                        )
                                        
                                        st.success("Animation GIF g√©n√©r√©e avec succ√®s !")
                                    else:
                                        st.error("Impossible de g√©n√©rer l'animation GIF.")
                            
                            st.info("L'animation GIF peut √™tre partag√©e facilement par email ou int√©gr√©e dans des pr√©sentations.")
                else:
                    st.warning("Impossible de g√©n√©rer des pr√©visions avec les donn√©es disponibles.")
                    if forecast_insights:
                        st.info("\n".join(forecast_insights))
            
            with tab5:
                st.header("üìä Rapport d√©taill√©")
                
                st.write("""
                G√©n√©rez un rapport complet bas√© sur les donn√©es et les filtres s√©lectionn√©s.
                Ce rapport inclut des statistiques d√©taill√©es, des analyses spatiales et temporelles,
                ainsi que des recommandations pour la gestion des risques.
                """)
                
                # G√©n√©ration du rapport
                if st.button("G√©n√©rer le rapport d√©taill√©"):
                    with st.spinner("G√©n√©ration du rapport en cours..."):
                        # Obtenir les hotspots pour le rapport
                        _, hotspots_df = create_hotspot_map(filtered_data, grid_size=0.1)
                        
                        # G√©n√©rer le rapport HTML
                        report_html = create_detailed_report(
                            all_data, 
                            filtered_data,
                            hotspots_df=hotspots_df,
                            forecast_insights=forecast_insights if 'forecast_insights' in locals() else None
                        )
                        
                        # Afficher un aper√ßu du rapport
                        st.subheader("Aper√ßu du rapport")
                        st.components.v1.html(report_html, height=500, scrolling=True)
                        
                        # Option de t√©l√©chargement
                        b64 = base64.b64encode(report_html.encode()).decode()
                        href = f'<a href="data:text/html;base64,{b64}" download="rapport_feux_cameroun.html" target="_blank">T√©l√©charger le rapport complet (HTML)</a>'
                        st.markdown(href, unsafe_allow_html=True)
                        
                        st.success("Rapport g√©n√©r√© avec succ√®s !")
                
                st.info("Le rapport peut √™tre t√©l√©charg√© et partag√© avec les parties prenantes pour faciliter la prise de d√©cision.")
        else:
            st.warning("Aucune donn√©e n'a pu √™tre charg√©e correctement")
    else:
        # Afficher des instructions et informations utiles quand aucun fichier n'est charg√©
        st.markdown("""
        ## Bienvenue dans l'outil d'analyse des feux du Cameroun
        
        Cette application vous permet d'analyser les donn√©es VIIRS sur les feux au Cameroun pour :
        
        - **Identifier les zones √† forte pression de feu** √† l'aide de cartes de chaleur et d'analyses spatiales
        - **Analyser les tendances temporelles** pour d√©tecter les p√©riodes √† risque √©lev√©
        - **Comparer les donn√©es entre diff√©rentes ann√©es** pour √©valuer l'√©volution des r√©gimes de feu
        
        ### Comment utiliser cette application
        
        1. T√©l√©chargez vos fichiers CSV VIIRS dans le panneau lat√©ral (un fichier par ann√©e)
        2. Utilisez les filtres pour affiner votre analyse
        3. Explorez les diff√©rents onglets pour visualiser les r√©sultats
        
        ### Format de donn√©es attendu
        
        L'application attend des fichiers CSV au format VIIRS SNPP contenant les colonnes suivantes :
        - `latitude`, `longitude` : Coordonn√©es du feu
        - `acq_date`, `acq_time` : Date et heure d'acquisition
        - `confidence` : Niveau de confiance de la d√©tection
        - `frp` : Puissance radiative du feu (optionnel)
        - `daynight` : D√©tection de jour ou de nuit
        
        Vous pouvez obtenir ces donn√©es depuis le site [NASA FIRMS](https://firms.modaps.eosdis.nasa.gov/download/).
        """)

if __name__ == "__main__":
    main()
